#+TITLE:     vim简介
#+AUTHOR:    ry
#+EMAIL:     ry@localhost.localdomain
#+DATE:      2012-05-25 Fri
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t 
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:


* 简介
  设想这样一种场景，一个人才思泉涌，他打开某个编辑器，一气呵成，没有任何的删除与跳转，然后凭借这个杰作拿到诺贝尔，显然这样的人用Notepad/Emacs/Vim效果都是一样。（Vim还要慢一些，因为初始状态为Normal模式）所以，我想说的是软件有它的应用场景。Vim也不例外。Vim就是让你能够快速的进行移动/删除/替换等编辑行为。
  
  行为与输入正文的区分，和真相一样，键盘也只有一个，怎样区分你想输入的是告诉Vim的行为还是输入的正文？Vim引入了模式之分，简言之，在一个模式下你的键盘输入会当作命令，这个模式官方名称为Normal模式，对应的就是Insert模式，在这个模式之中的所有键盘输入都会被当作文本的追加。怎样在两者之间进行切换？ /ESC/ 进入Normal模式， 进入Insert模式有很多，最基本是 /i/ 。下文会详细叙述。

  编辑文本的组成，从小到大，字符/单词/句子/段落/文件。鉴于你我都不是之前那个拿诺贝尔的人，所以编辑过程中不可避免的要移动光标，这个时候，各个编辑器的差距就全出来了。一般Vim的介绍文章上来就是 /hjkl/ ，我决定按移动步伐从小到大的顺序来介绍。见下表：
  
| 命令           | 行为解释                                  |   |   |   |
|----------------+-------------------------------------------+---+---+---|
| /h/  /l/       | 左移/右移 步伐：一个字符                  |   |   |   |
| /w/ /e/ /b/    | 左移/右移 步伐： 一个单词                 |   |   |   |
| /W/ /E/ /B/    | 左移/右移 步伐： 空格区分的下个单词       |   |   |   |
| /j/ /i/        | 下一行/上一行                             |   |   |   |
| /(/ /)/        | 上一句/下一句                             |   |   |   |
| /{/ /}/        | 上一段/下一段                             |   |   |   |
| /H/ /M/ /L/    | 当前显示窗口的顶端/中间/底端/             |   |   |   |
| /2H/ /2L/      | 当前显示窗口的顶端数第二行/底端倒数第二行 |   |   |   |
| /<c-f>/ /<c-b/ | 向下翻页/向上翻页                         |   |   |   |
| /gg/           | 文件顶端                                  |   |   |   |
| /G/            | 文件末端                                  |   |   |   |
| :e newfile.txt | 换文件                                       |   |   |   |


  移动的步伐由小到大的键盘映射上表已经列出，
