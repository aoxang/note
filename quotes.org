* 计算机方面的名言警句
  #+BEGIN_QUOTE
  Any fool can write code that a computer can u nderstand. Good programmer write code that humans can understand.
  -- Martin Fowler
  #+END_QUOTE

  #+BEGIN_QUOTE
  You think you know when you learn, are more sure when  you can write, even more when you can teach, but certain when you can program.
  -- Alan Perlis(Yale University computer scientist)
  #+END_QUOTE

  #+BEGIN_QUOTE
  Make it run, make it right, make it fast
  --Butler Lampson
  #+END_QUOTE

  #+BEGIN_QUOTE
  The best writing is rewriting
  --E. B. White
  #+END_QUOTE

  #+BEGIN_QUOTE
  Programs must be written for people to read, and only incidentally for machines to execute.
  -- Abelson & Sussman, SICP, preface to the first edition
  #+END_QUOTE

  #+BEGIN_QUOTE
  A man is a success if he get up in the morning and get to bed at night and in between he does what he wants to do

  -- Bob Dylan
  #+END_QUOTE
  #+BEGIN_QUOTE
  Emacs outshines all other editing software in approximately the same way that the noonday sun does the stars. It is not just bigger and brighter; it simply makes everything else vanish.
  -Neal Stephenson, “In the Beginning was the Command Line”
  #+END_QUOTE

  #+BEGIN_QUOTE
  Most people just make the mistake that is should be simple to design simple things. In reality, the effort required to design something is inversely proportional to the simplicity of the result.
  -- Roy Fileding
  #+END_QUOTE
  #+BEGIN_QUOTE
  If a problem is not completely understood, it is probably best to provide no solution at all.
  -- principles of X
  #+END_QUOTE
  #+BEGIN_QUOTE
  I hate code, and I want as little of it as possible in out product
  -- Jack Diederich
  #+END_QUOTE
  #+BEGIN_QUOTE
  The old adage "don't reinvent the wheel" doesn't apply when the wheel comes attached to locomotive engin.
  #+END_QUOTE
  #+BEGIN_QUOTE
  Inventing your own wheels give you a deep appreciation and understanding of how wheels work and what makes a good one.
  #+END_QUOTE

  #+BEGIN_QUOTE
  The signature of "this shouldn't be a class" is when the class havs two methods, and one of them is the constructor. Any time you see these signs, you probably should have just written a function.
  #+END_QUOTE
  #+BEGIN_QUOTE
  Refactoring > Rewriting
  #+END_QUOTE

  #+BEGIN_QUOTE
  The most important element of successful software development is learning.
  #+END_QUOTE

  #+BEGIN_QUOTE
  Good IT workers really don't like saying "I don't know." If they say it, they probably mean it. So stop pushing for a definitive answer when one doesn't exist. It's perfectly resonable to want some sort of plan up front. I'm actually one of those funny types who believe up front planning is a necessity. So long as everyone understands an estimate is just that: an estimate. You learn as you go along and discore more detail. So you revise the estimate accordingly.
  #+END_QUOTE

  #+BEGIN_QUOTE
  "If people knew how hard I worked to get my mastery, it wouldn't seem so wonderful at all." - Michelangelo
  #+END_QUOTE
  #+BEGIN_QUOTE
  Building something by gradually refine a prototype is good for morale because It keeps you engaged. In software my rule is: always have working code. If you're writing something you'll be able to test in an hour, you have the prospect of an immediate reward to motivate you. The same is true in the arts, and particularly in oil painting. Most Painters start with a blurry sketch and gradually refine it.
  -- From P.G. Hakers and Painters
  #+END_QUOTE
