* DONE http://tuprints.ulb.tu-darmstadt.de/6243/1/TR-18.pdf
  libpcap/libnet相关内容讲解
* TODO https://begriffs.com/posts/2017-04-13-longterm-computing-reading.html
  deep hack： haskell/C/debug等
* cloudflare golib: https://github.com/cloudflare/golibs
  lrucache参考实现
* wrk， http压测工具， 不知道与hey比怎么样？ https://github.com/wg/wrk
* 面向高中生的讲解，非常好 https://pudding.cool/2018/02/waveforms/
* learn math: https://www.math.uh.edu/~dblecher/pf2.html
   https://news.ycombinator.com/item?id=16392698  hn page
* https://blog.samaltman.com/productivity
  samaltman的文章，讲效率
  1. focus在喜欢做的事情上
  2. get the important shit done
  3. don't waste time on stupid shit
  4. make a lot of lists
  5. lists written down on paper
  6. keep morale, the more I get done, the better I feel, and then the more I get done.
  7. saying no to stuff
  8. 90% of the random mettings I take are a waste of time.
  9. the right goal is to allocate your year optimally, not your day.
  10. productivity in the wrong direction isn't worth anything at all.
* http://muratbuffalo.blogspot.com/2018/03/master-your-tools.html
* DONE http://muratbuffalo.blogspot.com/2018/03/master-your-tools.html
  善用工具的价值
"Give me six hours to chop down a tree and I will spend the first four sharpening the axe." -- Abraham Lincoln
* https://news.ycombinator.com/item?id=16883882
  这个评论和自己的体会很接近：
  #+BEGIN_QUOTE
Some hard lesson's i've realized while working in "professional" environments:
1. You must earn respect before you trash the system, no matter how shitty their code is or lack of tests. It's usually best to start by "doing your job"- whether that's issues assigned to you or bug fixes; you are at the bottom of the totem pole right now. Once you're "respected", implementing better solutions will be a lot easier.

2. Excuses for why shitty code is in production are probably legitimate excuses; a company that makes profit on a SaaS product needs to launch and iterate quickly. Product managers/sales/marketing do not care about your unit tests. Your users also don't care about your unit tests. Unfortunately this is a dilemma that's hard to swallow, because when things break, it comes back around.

You have to realize a team that's been there before you has done things in certain ways for certain reasons- whether that's good or bad, you must adapt to it before you go king kong on their shit.

Or you can just start your own company and make your own rules.

There's that saying: if you speak the truth, make them laugh. Otherwise they will kill you.

If you encounter three jerks in one day, you're the jerk.

  #+END_QUOTE
* https://www.gnu.org/software/emacs/manual/html_mono/eshell.html
  #+BEGIN_QUOTE
  Any tool you use often deserves the time spent learning to master it.
  #+END_QUOTE
* Go is designed for practicality
  https://news.ycombinator.com/item?id=17114308
  提到haskell为毛这么优秀却用的人那么少？
* https://news.ycombinator.com/item?id=17470727
  command line for kids
* https://utcc.utoronto.ca/~cks/space/blog/linux/LinuxBootOverview?
  kernel boot detail
* https://github.com/s-matyukevich/raspberry-pi-os
  kernel dev on raspberry
* https://github.com/digineo/go-ping
  写的非常简洁的ping package
* github.com/hashicorp/go-cleanhttp
  httpclient的一些示例
* https://docs.google.com/presentation/d/1kSuQyW5DTnkVaZEjGYCkfOxvzCqGEFzWBy4e9Uedd9k/preview?imm_mid=0f9b7e&cmp=em-data-na-na-newsltr_20171213&slide=id.g168a3288f7_0_58
  deeplearning 101
* https://brandur.org/minimalism
  关于大道至简的一些说明：
  #+BEGIN_QUOTE
  Do more and more with less and less until eventually you can do everything with nothing.
  #+END_QUOTE
  #+BEGIN_QUOTE
  It seems that perfection is reached not when there is nothing left to add, but when there is nothing left to take away.
  #+END_QUOTE
* https://csunplugged.org/en/  https://news.ycombinator.com/item?id=17661707
  cs专业教育，不用计算机讲解
* http://www.flysnow.org/2018/01/20/golang-goquery-examples-selector.html
  gocolly selector的一些示例
* https://news.ycombinator.com/item?id=17238135
  讲管理
I always ask 3 questions in my discussions:

What is the company's mission?

How is your team contributing to the mission?

How does the work you're doing today contribute to the mission?
* be kind
+ https://news.ycombinator.com/item?id=17745688
+ https://www.briangilham.com/be-kind
+ http://boz.com/articles/be-kind.html
* https://nikhilm.github.io/uvbook/index.html
  libuv讲解
* https://povilasv.me/go-memory-management/
  比较有深度
* http://stevelosh.com/blog/2018/08/a-road-to-common-lisp/
  common lisp学习经验之谈
* https://bholley.net/blog/2017/stylo.html
  I am a firm proponent of incrementalism. I think the desire to throw everything away and start from scratch tends to be an emotional one, and generally indicates a lack of focus and clear thinking about what will actually move the needle.
  是的，持续优化才是解决问题的方法，一上来就想把所有都抛弃从头再来不是明智的做法。
* https://multicians.org/andre.html
  纸和笔始终是最重要的工具
* https://www.cs.cmu.edu/~mblum/research/pdf/grad.html
  怎么阅读
* https://news.ycombinator.com/item?id=18678314
  machine learning相关
